fn main() {

    // 使用 let 来创建变量，变量默认是不能修改的，如果想要修改，则需要添加 mut 关键字
    let mut var1 = "hello";

    var1 = "hello2";

    println!("Hello, world! {}", var1);

    // 使用 const 来创建常量，常量不可变，而且必须注明类型
    const PI: u32 = 30;

    // 数据类型
    // 基本数据类型：字符串，布尔，整数，浮点数

    // 整数：u32 表示该值占 32 位空间的无符号整型，有符号是以 i 开头，有符号类型可以取负数
    // 整数类型有 i8，i16，i32，i64，i128，isize，同样还有无符号的一系列类型
    // 有符号的取值范围是 -(2^n-1)~z^n-1 -1，如 i8 则可以存储 -2^7 ~ 2^7 - 1，即 -128 ~ 127 之间的数字
    // isize 和 usize 则取决于计算机系统，如果是 64 位的则是 64 位，32 位的则是 32 位，常用于某些集合的索引
    // 如果不确定类型，则可以使用默认的，u32

    // 浮点类型有 f32,f64，默认是 f64

    // 复合类型：元组 tuple 和数组 array

    // 元组的长度是固定的，声明后就不能增长或者缩小，元组中每个位置上的内容都是有指定类型，类型可以不同
    // 可以使用解构来获取元组中的数据，同时也可以使用 . 语法来获取，. 后面跟的数元素的索引值

    // 没有任何元素的元组也是一种特殊的类型，被称为单元类型，他的值被称为单元值，如果表达式不返回任何其他的值，则隐式的返回单元值

    // 数组：和元组不同的是，数组中的元素都是必须一样的，数组具有固定的长度
    // 当长度需要变化的时候，可以使用动态数组（后面再看），如果已知数组长度固定，那么则使用数组

    // i32 表示数组中元素的类型，5 表示元素的个数，中间用分号隔开
    let arr1: [i32; 5] = [1,2,3,4,5];

    // 创造一个元素都相同的数组，以下内容表示创建了一个数组，其中包含了 5 个 3
    let arr1 = [3, 5];
    // 可以通过下标来放访问数组中的元素
    arr1[0];

}
